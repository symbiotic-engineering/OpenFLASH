name: Publish Python Package

on:
  push:
    tags:
      - 'v*.*.*rc'  # Trigger on version tags like v1.0.0rc (release candidates)
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/open-flash/
    steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            ref: ${{ github.head_ref || github.ref_name }} # avoid detached HEAD

        - name: Configure Git credentials
          run: |
            git config user.name github-actions[bot]
            git config user.email 41898282+github-actions[bot]@users.noreply.github.com

        - name: Derive version
          id: get_version
          run: |
            REF="${{ github.ref_name }}"
            echo VERSION="${REF::-2}" >> $GITHUB_OUTPUT

        - name: Update version in citation.cff
          run: |
            CURRENT_DATE=$(date +%Y-%m-%d)
            # use the previously-derived trimmed version
            sed -i "s/^version: .*/version: ${{ steps.get_version.outputs.VERSION }}/" CITATION.cff
            sed -i "s/^date-released: .*/date-released: '${CURRENT_DATE}'/" CITATION.cff

        - name: Check validity of citation.cff
          uses: citation-file-format/cffconvert-github-action@2.0.0
          if: always()
          with:
            args: "-i ./CITATION.cff -f zenodo --validate --show-trace"

        - name: Commit updated citation.cff
          run: |
            git add CITATION.cff
            git commit -m "Update CITATION.cff for release ${{ steps.get_version.outputs.VERSION }}"
            git tag ${{ steps.get_version.outputs.VERSION }}
            git push origin
            git push origin --tags

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'

        - name: Install build tools
          run: pip install build twine

        - name: Build distribution packages
          run: python -m build

        - name: Publish package to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
          with:
            skip-existing: true

        - name: Setup Miniconda
          uses: conda-incubator/setup-miniconda@v3
          with:
            python-version: 3.11
            environment-file: conda-recipe/build_env.yaml
            auto-update-conda: false
            auto-activate-base: false
            show-channel-urls: true

        - name: Build and upload conda packages
          uses: uibcdf/action-build-and-upload-conda-packages@2a98398b2f382f5ead0feebda695a13474e107f8
          id: conda-build-and-upload
          with:
            meta_yaml_dir: conda-recipe 
            label: main
            user: sea-lab
            token: ${{ secrets.ANACONDA_TOKEN }}

        - name: Re-format output paths
          id: reformat-paths
          # Needed to have the correct newline-separated files format for the following release step
          run: |
            paths=$(tr ' ' '\n' <<< "${{steps.conda-build-and-upload.outputs.paths}}")
            echo "newline-separated-paths=$paths" >> $GITHUB_OUTPUT

        - name: Create GitHub release
          uses: softprops/action-gh-release@v2
          with:
            tag_name: ${{ steps.get_version.outputs.VERSION }}
            name: ${{ steps.get_version.outputs.VERSION }}
            generate_release_notes: true
            fail_on_unmatched_files: true
            files: ${{steps.reformat-paths.outputs.newline-separated-paths}}
